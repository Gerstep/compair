import os
import uuid
import shutil
import random
import string
import errno

from flask import Blueprint, request, current_app
from bouncer.constants import READ, EDIT, CREATE, DELETE, MANAGE
from flask_login import login_required, current_user
from flask_restful import Resource, marshal

from acj.authorization import allow, require
from . import dataformat
from acj.core import db, event
from acj.models import File, Assignment, Answer
from .util import new_restful_api

file_api = Blueprint('file_api', __name__)
api = new_restful_api(file_api)

# events
on_save_file = event.signal('FILE_CREATE')
on_file_get = event.signal('FILE_GET')
on_file_delete = event.signal('FILE_DELETE')


def allowed_file(filename, allowed):
    return '.' in filename and \
        filename.rsplit('.', 1)[1] in allowed


def random_generator(size=8, chars=string.ascii_uppercase + string.digits):
    return ''.join(random.choice(chars) for _ in range(size))


# /
class FileAPI(Resource):
    @login_required
    def post(self):
        uploaded_file = request.files['file']

        on_save_file.send(
            self,
            event_name=on_save_file.name,
            user=current_user,
            data={'file': uploaded_file.filename})

        if uploaded_file and allowed_file(uploaded_file.filename, current_app.config['ATTACHMENT_ALLOWED_EXTENSIONS']):
            db_file = File(
                user_id=current_user.id,
                name='',
                alias=uploaded_file.filename
            )
            db.session.add(db_file)
            db.session.commit()

            try:
                # use uuid generated by file model for name
                name = db_file.uuid + '.pdf'

                # create new file with name
                full_path = os.path.join(current_app.config['ATTACHMENT_UPLOAD_FOLDER'], name)
                uploaded_file.save(full_path)
                current_app.logger.debug("Saved attachment {}/{}".format(current_app.config['ATTACHMENT_UPLOAD_FOLDER'], name))

                # update file record with name
                db_file.name = name
                db.session.commit()
            except Exception as e:
                db.session.rollback()
                raise e

            return {'file': marshal(db_file, dataformat.get_file())}

        return False

api.add_resource(FileAPI, '')


# /file_uuid
class FileIdAPI(Resource):
    @login_required
    def delete(self, file_uuid):
        uploaded_file = File.get_active_by_uuid_or_404(file_uuid)

        require(DELETE, uploaded_file)

        for assignment in uploaded_file.assignments.all():
            assignment.file_id = None

        for answer in uploaded_file.answers.all():
            answer.file_id = None

        uploaded_file.active = False
        db.session.commit()

        on_file_delete.send(
            self,
            event_name=on_file_delete.name,
            user=current_user,
            data={'file_id': uploaded_file.id})

        return {'id': uploaded_file.uuid}

api.add_resource(FileIdAPI, '/<file_uuid>')

def duplicate_file(original_file, new_model_name, new_model_id):
    duplicate_name = str(uuid.uuid4()) + '.pdf'

    shutil.copy(
        os.path.join(current_app.config['ATTACHMENT_UPLOAD_FOLDER'], original_file.name),
        os.path.join(current_app.config['ATTACHMENT_UPLOAD_FOLDER'], duplicate_name)
    )

    duplicated_file = File(user_id=current_user.id, name=tmp_name, alias=original_file.alias)

    db.session.add(duplicated_file)
    db.session.commit()
    current_app.logger.debug(
        "copied file id:" + str(original_file.id) + " from " + os.path.join(current_app.config['ATTACHMENT_UPLOAD_FOLDER'], original_file.name) +
        " to " + os.path.join(current_app.config['ATTACHMENT_UPLOAD_FOLDER'], tmp_name))

    return duplicated_file