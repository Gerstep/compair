import os
import uuid
import shutil
import random
import string
import errno

from flask import Blueprint, request, current_app
from bouncer.constants import READ, EDIT, CREATE, DELETE, MANAGE
from flask_login import login_required, current_user
from flask_restful import Resource, marshal

from compair.authorization import allow, require
from . import dataformat
from compair.core import db, event
from compair.models import File, Assignment, Answer
from .util import new_restful_api

file_api = Blueprint('file_api', __name__)
api = new_restful_api(file_api)

# events
on_save_file = event.signal('FILE_CREATE')


def allowed_file(filename, allowed):
    return '.' in filename and \
        filename.lower().rsplit('.', 1)[1] in allowed


def random_generator(size=8, chars=string.ascii_uppercase + string.digits):
    return ''.join(random.choice(chars) for _ in range(size))


# /
class FileAPI(Resource):
    @login_required
    def post(self):
        uploaded_file = request.files.get('file')

        if not uploaded_file:
            return {"error": "No file attachment found"}, 400
        elif not allowed_file(uploaded_file.filename, current_app.config['ATTACHMENT_ALLOWED_EXTENSIONS']):
            return {"error": "Invalid file extension"}, 400

        on_save_file.send(
            self,
            event_name=on_save_file.name,
            user=current_user,
            data={'file': uploaded_file.filename})

        try:
            db_file = File(
                user_id=current_user.id,
                name='',
                alias=uploaded_file.filename
            )
            db.session.add(db_file)
            db.session.commit()

            # use uuid generated by file model for name
            name = db_file.uuid + '.' + uploaded_file.filename.lower().rsplit('.', 1)[1]

            # create new file with name
            full_path = os.path.join(current_app.config['ATTACHMENT_UPLOAD_FOLDER'], name)
            uploaded_file.save(full_path)
            current_app.logger.debug("Saved attachment {}/{}".format(current_app.config['ATTACHMENT_UPLOAD_FOLDER'], name))

            # update file record with name
            db_file.name = name
            db.session.commit()
        except Exception as e:
            db.session.rollback()
            raise e

        return {'file': marshal(db_file, dataformat.get_file())}

api.add_resource(FileAPI, '')

"""
# Not needed at the moment
def duplicate_file(original_file, new_model_name, new_model_id):
    try:
        duplicated_file = File(
            user_id=current_user.id,
            name='',
            alias=original_file.alias
        )
        db.session.add(duplicated_file)
        db.session.commit()

        # use uuid generated by file model for name
        duplicate_name = duplicated_file.uuid + '.' + original_file.extension

        # create new file with name
        shutil.copy(
            os.path.join(current_app.config['ATTACHMENT_UPLOAD_FOLDER'], original_file.name),
            os.path.join(current_app.config['ATTACHMENT_UPLOAD_FOLDER'], duplicate_name)
        )

        current_app.logger.debug(
            "copied file id:" + str(original_file.id) + " from " + os.path.join(current_app.config['ATTACHMENT_UPLOAD_FOLDER'], original_file.name) +
            " to " + os.path.join(current_app.config['ATTACHMENT_UPLOAD_FOLDER'], duplicate_name))

        # update file record with name
        duplicated_file.name = duplicate_name
        db.session.commit()
    except Exception as e:
        db.session.rollback()
        raise e

    return duplicated_file
"""